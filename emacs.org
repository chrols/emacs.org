# -*- mode: org; coding: utf-8-unix -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+OPTIONS: ^:nil

#+TITLE: Emacs Configuration
#+AUTHOR: Christian Olsson
#+EMAIL: chrols@chrols.se

* Introduction
This file is an attempt to achieve a well ordered and well documented
Emacs configuration.

My ~.emacs~ is a single line which loads this configuration:
~(org-babel-load-file (expand-file-name "/path/to/emacs.org"))~

Note that [[https://github.com/jwiegley/use-package][use-package]] is required to be available. If you got this
file from my git repository it should be included. Otherwise you may
install it manually with ~M-x list-packages~.
* Startup
** Context
#+BEGIN_SRC emacs-lisp
  (defun work-computer-p ()
    (not (or (string= (system-name) "athena")
             (string= (system-name) "theseus"))))
#+END_SRC
** straight.el
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC
** use-package
[[https://github.com/jwiegley/use-package][use-package]] is used throughout this configuration.

Simple use-package configuration explanation:

- ~:init~ is executed before loading the package
- ~:config~ is executed after loading the package
- ~:bind~ is a cons or a list of conses in the form ~("C-x g" . function)~

use-package by default skips using packages that are not installed. I
prefer that they are installed. This behavior can be overridden by
=:ensure nil=.

*** Always ensure that packages are available
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

~use-package~ is now provided by straight.el.
* Common configuration
** More GC memory
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 200000000)
#+END_SRC
** Appearence
*** Disable default fluff
I find the menu bar of some utility when running Emacs in a window,
which only happens on Windows.
#+BEGIN_SRC emacs-lisp
  (toggle-scroll-bar -1)
  (add-hook 'after-make-frame-functions 'never-scroll-bars)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq-default indent-tabs-mode nil)
  (setq initial-scratch-message nil)
  (column-number-mode)
#+END_SRC
*** Clock
Show a 24 hour clock on the mode line.
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time)
#+END_SRC
*** Calendar
The week begins on Monday as is proper, and I prefer dates in English.
#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1)
  (setq system-time-locale "C")
#+END_SRC
*** Font
Define an interactive utility function for setting the font and set a default font
#+BEGIN_SRC emacs-lisp
  (defun chr-set-font-full (preferred-font preferred-size)
    (if (member preferred-font (font-family-list))
        (progn
          (set-frame-font (concat preferred-font "-" preferred-size) t t)
          (add-to-list 'default-frame-alist  (cons 'font (concat preferred-font "-" preferred-size))))
      (message "Did not find font: %S" preferred-font)))

  ; Fonts I like
  (defvar chr-good-fonts '(
                           "Cantarell - 12"
                           "Inconsolata - 12"
                           "Inter - 10"
                           "Iosevka - 12"
                           "Less Perfect DOS VGA - 12"
                           "Noto Mono - 12"
                           "PragmataPro - 12"
                           ))
  (defun chr-set-font ()
    (interactive)
    (let* ((chosen (completing-read "Font" chr-good-fonts))
           (args (split-string chosen " - ")))
      (chr-set-font-full (nth 0 args) (nth 1 args))))

  ; Default
  (chr-set-font-full "Less Perfect DOS VGA" "12")
#+END_SRC

*** Emoji font
#+BEGIN_SRC emacs-lisp
  (set-fontset-font t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend)
#+END_SRC
*** Theme
Due to the amount of sunlight I prefer to have a lighter theme at work.

Some themes I like:

- material
- monokai
- solarized
- spacemacs
- zenburn
- gruvbox

#+BEGIN_SRC emacs-lisp
      (use-package gruvbox-theme
          :defer t
          :init
          (load-theme 'gruvbox t))
#+END_SRC
*** Prettify symbols

Note that prettify-symbols-alist is buffer local

#+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-hook
          (lambda ()
            (mapc (lambda (pair) (push pair prettify-symbols-alist))
         '(("lambda" . 955) ;; λ
            ("function" . 955) ;; λ
            ("in" . 8712) ;; ∈
            ("!in" . 8713) ;; ∉
            ("null" . 8709) ;; ∅ = 8709
            (".." . 8230)))))

     (global-prettify-symbols-mode 1)
#+END_SRC
*** Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :config
  (diminish 'abbrev-mode)
  (diminish 'auto-fill-function)
  (diminish 'auto-revert-mode)
  (diminish 'eldoc-mode)
  (diminish 'hs-minor-mode)
  (diminish 'whitespace-mode))
#+END_SRC
** Speedup
#+BEGIN_SRC emacs-lisp
  (setq auto-window-vscroll nil)
#+END_SRC
** Convenience
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode -1)
  (setf electric-pair-skip-self nil)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq whitespace-line-column 120)
  (setq window-combination-resize t)
  (setq compilation-scroll-output 'first-error)
  (setq large-file-warning-threshold 20000000)
#+END_SRC
*** More unique buffers
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setf uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC
** Do not litter
Typically I work with an SCM and do not find the backup files particularly helpful.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))

  (setq make-backup-files nil)
  (setq backup-inhibited t) ;; disable backup
  (setq auto-save-default nil) ;;disable auto save
#+END_SRC

** No bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** No trailing whitespace
I do not want any trailing whitespace. That said, work code is littered
with it. Having it enabled will result in "unnecessary" commits.
#+BEGIN_SRC emacs-lisp
  (add-hook
   'before-save-hook
   (lambda ()
     (unless (work-computer-p)
       (delete-trailing-whitespace))))
#+END_SRC
** Increase what is considered a large file
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold (* 100 1000 1000))
#+END_SRC
** Custom
Keep custom settings in a separate file.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC
** Global auto revert mode
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC
** edit-server
[[https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1/][Edit with Emacs]]
#+BEGIN_SRC emacs-lisp
  (use-package edit-server
      :config (edit-server-start))
#+END_SRC
** Pop mark
#+BEGIN_SRC emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+END_SRC
* Shortcuts
Global shortcuts I find handy. The Emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][convention]] reserves ~C-c
[letter]~ and function keys F5 to F9 for user configuration. However
to my knoledge very few modes make any use of the ~hyper~ and ~super~
modifiers.
** C-c
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c f") 'projectile-find-file)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c u") 'ace-jump-mode)
  (global-set-key (kbd "C-c l")  'org-store-link)
  (global-set-key (kbd "C-c <f5>")  '(lambda () (interactive) (find-file "~/emacs.org/emacs.org")))
#+END_SRC
** Kill this buffer
Typically I have focus on the buffer I want to kill.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
;; Counsel map
(define-prefix-command 'my-counsel-map)
(define-key my-counsel-map (kbd "f") 'counsel-describe-function)
(define-key my-counsel-map (kbd "v") 'counsel-describe-variable)
(define-key my-counsel-map (kbd "u") 'counsel-unicode-char)
#+END_SRC
** Hyper
The hyper modifier is typically unused by most modes.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "H-a") 'rg-project)
  (global-set-key (kbd "H-o") 'projectile-find-file)
  (global-set-key (kbd "H-u") 'ace-jump-mode)
  (global-set-key (kbd "H-i") 'org-capture)
  (global-set-key (kbd "H-n") 'flycheck-next-error)
  (global-set-key (kbd "H-s") 'ff-find-other-file)
  (global-set-key (kbd "H-g") my-counsel-map)
  (global-set-key (kbd "H-r") '(lambda () (interactive) (compile "make -k")))
  (global-set-key (kbd "H-k") 'kill-this-buffer)
  (global-set-key (kbd "H-f") 'next-buffer)
  (global-set-key (kbd "H-b") 'previous-buffer)
  (global-set-key (kbd "H-z") 'zone)
#+END_SRC
** Function keys
According to the Emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][conventions]] only function key f5-f9 are
guaranteed to be free.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f1>")  'hide/show-comments-toggle)  
  (global-set-key (kbd "<f2>") 'eshell)
  (global-set-key (kbd "<f4>") 'projectile-find-other-file)
  (global-set-key (kbd "<f5>") 'recompile)
  (global-set-key (kbd "<f11>") 'toggle-frame-fullscreen)
#+END_SRC
* Minor modes
** Smex
"Smex is a M-x enhancement for Emacs, it provides a convenient interface to your recently and most
frequently used commands."
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :bind ("M-x" . smex))
#+END_SRC
** IVY
#+BEGIN_SRC emacs-lisp
  (use-package ivy
      :diminish
      :init (ivy-mode t))

#+END_SRC
** undo-tree
undo-tree is a great way to interact with Emacs' undo history.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
      :diminish undo-tree-mode
      :config (progn
                (global-undo-tree-mode 1)
                ;; Prevent undo tree files from polluting your git repo
                (setf undo-tree-auto-save-history nil)
                (setq undo-tree-visualizer-timestamps t)))

#+END_SRC
** rg
[[https://github.com/dajva/rg.el][rg]] is a good way to interact with ripgrep. rg include wgrep as a
dependency and offers a wgrep mode.
#+BEGIN_SRC emacs-lisp
  (use-package rg
      :config (progn
                (rg-enable-default-bindings "\M-s")
                (setq rg-enable-default-bindings nil)
                (rg-define-search rg-project-cpp
                    :dir project
                    :files "cpp")))
#+END_SRC
** Flycheck
Add a hook to force flycheck to always use C++11 support. We use the Clang language backend so this
is set to clang.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
      :init  (progn (global-flycheck-mode)
                    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
      :config (progn (add-hook 'c++-mode-hook (lambda ()
                                                (setq flycheck-clang-language-standard "c++11")))))
#+END_SRC
** Yasnippet
Use YASnippet. Once loaded =M-x yas-reload-all= for reload.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :commands (yas-minor-mode)
    :init (progn
            (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
            (add-hook 'prog-mode-hook #'yas-minor-mode))
    :config (yas-reload-all))
#+END_SRC
** Magit
Magit is a great way to interact with git within Emacs. Manual available [[https://magit.vc/manual/magit.html][here]].
#+BEGIN_SRC emacs-lisp
    (use-package magit
        :init   (progn
                  (define-derived-mode magit-staging-mode magit-status-mode "Magit staging"
                                       "Mode for showing staged and unstaged changes."
                                       :group 'magit-status)

                  (defun magit-staging-refresh-buffer ()
                    (magit-insert-section (status)
                        (magit-insert-untracked-files)
                      (magit-insert-unstaged-changes)
                      (magit-insert-staged-changes)))

                  (defun magit-staging ()
                    (interactive)
                    (magit-mode-setup #'magit-staging-mode)))
        :config (setq magit-save-repository-buffers nil)
        :bind (("C-x g" . magit-status)
               ("C-x M-g" . magit-dispatch-popup)
               ("C-x C-g" . magit-staging)))
#+END_SRC
*** Log rows
#+BEGIN_SRC emacs-lisp
  (defun magit-log-rows ()
    (interactive)
    (let* ((old-args (car (magit-log-arguments)))
           (begin (if (region-active-p)
                      (line-number-at-pos (region-beginning))
                    (line-number-at-pos)))
           (end (if (region-active-p)
                    (line-number-at-pos (region-end))
                  (line-number-at-pos)))
           (range (concat "-L " (number-to-string begin) "," (number-to-string end) ":" (buffer-file-name))))
      (magit-log-current '("HEAD") (list range "-n256"))
      (setf (nth 1 magit-refresh-args) old-args)))
#+END_SRC
*** Margin
#+begin_src emacs-lisp
(setq magit-log-margin '(t "%Y-%m-%d" magit-log-margin-width t 18))
#+end_src
*** Performance
Should improve Emacs performance.
#+BEGIN_SRC emacs-lisp
  (setq vc-handled-backends nil)
#+END_SRC
** Which key
After pressing a prefix key, display a pop-up with possible
completions after a delay.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish
    :config (which-key-mode))
#+END_SRC
** keyfreq
Track which functions / keys are the most used. Invoke ~keyfreq-show~
to see the current distribution.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config (progn
              (keyfreq-mode 1)
              (keyfreq-autosave-mode 1)))
#+END_SRC

** Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.

Note that while using ~alien~ as indexing method Projectile will not
apply its own filters, instead it will be up to the external tool to
filter things (e.g .gitignore).

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** ace-window
I use a Dvorak layout so aoeu and htns are on the homerows.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
      :bind (("M-o" . ace-window)
             ("C-x o" . ace-window))
      :init (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))

#+END_SRC
** ace-jump-mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
      :bind ("H-<SPC>" . ace-jump-mode))
#+END_SRC
** ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
      :bind ("C-x C-b" . ibuffer))
#+END_SRC
** buffer-move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
      :bind (("H-<left>" . buf-move-left)
             ("H-<right>" . buf-move-right)
             ("H-<up>" . buf-move-up)
             ("H-<down>" . buf-move-down)))
#+END_SRC
** smart-mode-line
Does not appear to play well with some themes
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
      :if (work-computer-p)
      :config (smart-mode-line-enable))
#+END_SRC

** Winner Mode
Winner mode is a global minor mode that adds undo / redo for Emacs
window changes.

Default shortcuts: ~C-c <left>~ and ~C-c <right>~

#+BEGIN_SRC emacs-lisp
  (winner-mode)
#+END_SRC
* Utility functions
** String inflection
#+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :bind (:map prog-mode-map
              ("C-M-j" .
              string-inflection-cycle)))
#+END_SRC
** Narrowing
#+BEGIN_SRC emacs-lisp
  (defun narrow-to-paragraph (arg1 arg2)
    "Make text outside current paragraph invisible.
    Prefix arguments as per `mark-paragraph'."
    (interactive "p\np")
    (save-excursion
      (mark-paragraph arg1 arg2)
      (narrow-to-region (point) (mark))))

  (global-set-key (kbd "C-h C-f") 'find-function)
  (global-set-key (kbd "C-x n h") 'narrow-to-paragraph)

  (add-hook 'c-mode-hook 'hs-minor-mode)
#+END_SRC
** Visit ansi-term
#+BEGIN_SRC emacs-lisp
  (defun visit-ansi-term ()
    "If we are in an *ansi-term*, rename it.
  If there is no *ansi-term*, run it.
  If there is one running, switch to that buffer."
    (interactive)
    (if (equal "*ansi-term*" (buffer-name))
        (call-interactively 'rename-buffer)
      (if (get-buffer "*ansi-term*")
      (switch-to-buffer "*ansi-term*")
        (ansi-term "/bin/zsh"))))
#+END_SRC

** Pretty print XML
#+BEGIN_SRC emacs-lisp
  (defun bf-pretty-print-xml-region (begin end)
    "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
    (interactive "r")
    (save-excursion
        (nxml-mode)
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t)
          (backward-char) (insert "\n"))
        (indent-region begin end))
      (message "Ah, much better!"))
#+END_SRC

** Never scroll bars
#+BEGIN_SRC emacs-lisp
  (defun never-scroll-bars (frame)
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))
#+END_SRC

** Xah Lee functions
From [[http://ergoemacs.org/][ergoemacs]].
#+BEGIN_SRC emacs-lisp
(defun xah-toggle-margin-right ()
  "Toggle the right margin between `fill-column' or window width.
This command is convenient when reading novel, documentation."
  (interactive)
  (if (eq (cdr (window-margins)) nil)
      (set-window-margins nil 0 (- (window-body-width) fill-column))
    (set-window-margins nil 0 0)))
#+END_SRC
** Copy filename
#+BEGIN_SRC emacs-lisp
(defun chr-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

** New buffer
#+BEGIN_SRC emacs-lisp
(defun generate-buffer ()
  (interactive)
  (switch-to-buffer (make-temp-name "fluff")))
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-lXGh --group-directories-first")
#+END_SRC
* Programming modes
Configuration specific to the various programming modes.
** Common
*** Autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package company
      :bind (:map company-active-map
                  ("C-n" . company-select-next)
                  ("C-p" . company-select-previous))
      :init (add-hook 'prog-mode-hook 'company-mode)
      :config
      (setq company-idle-delay 0) ; Delay to complete
      (setq company-minimum-prefix-length 1)
      (setq company-selection-wrap-around t)
      (setq lsp-completion-provider :capf)
      (if (display-graphic-p)
          (define-key company-active-map [tab] 'company-select-next)
        (define-key company-active-map (kbd "C-i") 'company-select-next)))
#+END_SRC

*** Allow ANSI colors in compilation buffer
#+BEGIN_SRC emacs-lisp
;; Stolen from (http://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html)
(require 'ansi-color)
(defun endless/colorize-compilation ()
  "Colorize from `compilation-filter-start' to `point'."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region
     compilation-filter-start (point))))

(add-hook 'compilation-filter-hook
          #'endless/colorize-compilation)

;; Stolen from (https://oleksandrmanzyuk.wordpress.com/2011/11/05/better-emacs-shell-part-i/)
(defun regexp-alternatives (regexps)
  "Return the alternation of a list of regexps."
  (mapconcat (lambda (regexp)
               (concat "\\(?:" regexp "\\)"))
             regexps "\\|"))

(defvar non-sgr-control-sequence-regexp nil
  "Regexp that matches non-SGR control sequences.")

(setq non-sgr-control-sequence-regexp
      (regexp-alternatives
       '(;; icon name escape sequences
         "\033\\][0-2];.*?\007"
         ;; non-SGR CSI escape sequences
         "\033\\[\\??[0-9;]*[^0-9;m]"
         ;; noop
         "\012\033\\[2K\033\\[1F"
         )))

(defun filter-non-sgr-control-sequences-in-region (begin end)
  (save-excursion
    (goto-char begin)
    (while (re-search-forward
            non-sgr-control-sequence-regexp end t)
      (replace-match ""))))

(defun filter-non-sgr-control-sequences-in-output (ignored)
  (let ((start-marker
         (or comint-last-output-start
             (point-min-marker)))
        (end-marker
         (process-mark
          (get-buffer-process (current-buffer)))))
    (filter-non-sgr-control-sequences-in-region
     start-marker
     end-marker)))

(add-hook 'comint-output-filter-functions
          'filter-non-sgr-control-sequences-in-output)
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
  (setq lisp-indent-function 'common-lisp-indent-function)
#+END_SRC

** C / C++
*** Basic configuration
#+BEGIN_SRC emacs-lisp
  ;; C-IDE based on https://github.com/tuhdo/emacs-c-ide-demo
  (use-package cc-mode
      :config
      ;; Available C style:
      ;; "gnu": The default style for GNU projects
      ;; "k&r": What Kernighan and Ritchie, the authors of C used in their book
      ;; "bsd": What BSD developers use, aka "Allman style" after Eric Allman.
      ;; "whitesmith": Popularized by the examples that came with Whitesmiths C, an early commercial C compiler.
      ;; "stroustrup": What Stroustrup, the author of C++ used in his book
      ;; "ellemtel": Popular C++ coding standards as defined by "Programming in C++, Rules and Recommendations," Erik Nyquist and Mats Henricson, Ellemtel
      ;; "linux": What the Linux developers use for kernel development
      ;; "python": What Python developers use for extension modules
      ;; "java": The default style for java-mode (see below)
      ;; "user": When you want to define your own style
      (setq c-default-style "user")
      (setq c-basic-offset  4)
      (setq-default indent-tabs-mode nil)
      (setq backward-delete-char-untabify-method 'hungry)
      (setq gdb-many-windows t ;; use gdb-many-windows by default
            gdb-show-main t))
#+END_SRC
*** Code folding
#+BEGIN_SRC emacs-lisp
  (defun alexott/cedet-hook ()
    (local-set-key (kbd "C-c C-j") 'semantic-ia-fast-jump)
    (local-set-key (kbd "C-c C-s") 'semantic-ia-show-summary))

  ;; hs-minor-mode for folding source code
  (add-hook 'c-mode-common-hook 'hs-minor-mode)
  (add-hook 'c-mode-common-hook 'alexott/cedet-hook)
  (add-hook 'c-mode-hook 'alexott/cedet-hook)
  (add-hook 'c++-mode-hook 'alexott/cedet-hook)
#+END_SRC
*** Custom
#+BEGIN_SRC emacs-lisp

  (setq ff-search-directories
        '("." "../src" "../include"))
#+END_SRC
*** clang-format on save
Apply clang-format on my personal projects when saving to keep them
consistently consistent.

At work where there is consistent inconsistency only format my
modifications to not introduce "uneccesary" changes.

[[https://github.com/SavchenkoValeriy/emacs-clang-format-plus][clang-format+]] makes this behavior easy.

Use regular clang-format if on personal machines.
#+BEGIN_SRC emacs-lisp
  (use-package clang-format+
      :if (work-computer-p)
      :hook c-mode-common-hook
      :init
      (setq clang-format+-context (if (work-computer-p) 'modification 'buffer))
      (setq clang-format-style-option "file"))

  (use-package clang-format
      :if (not (work-computer-p))
      :hook c-mode-common-hook
      :commands clang-format-buffer
      :init
      (setq clang-format-style-option "file"))
#+END_SRC
*** CMake
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :ensure t
  :mode ("CMakeLists.txt" "\\.cmake"))
#+END_SRC
*** Rainbow-delimters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
      :hook (c-mode-common . rainbow-delimiters-mode))
#+end_src
** Python
*** IDE
#+BEGIN_SRC emacs-lisp
;;; package --- python configs
;;; Commentary:
;;; Contains my python configs

;;; Code:

(use-package python
  :mode ("\\.py" . python-mode)
  :config
  (use-package elpy
    :init
    (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
    :config
    (setq elpy-rpc-backend "jedi")
    ;; (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
    ;;flycheck-python-flake8-executable "/usr/local/bin/flake8"
    :bind (:map elpy-mode-map
	      ("M-." . elpy-goto-definition)
	      ("M-," . pop-tag-mark)))
  (elpy-enable))

(use-package pip-requirements
  :config
  (add-hook 'pip-requirements-mode-hook #'pip-requirements-auto-complete-setup))

(use-package py-autopep8)


(use-package pyenv-mode
  :if
  (executable-find "pyenv")
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  :bind
  ("C-x p e" . pyenv-activate-current-project))

(defun pyenv-init()
  (setq global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global")))
  (message (concat "Setting pyenv version to " global-pyenv))
  (pyenv-mode-set global-pyenv)
  (defvar pyenv-current-version nil global-pyenv))

(defun pyenv-activate-current-project ()
  "Automatically activates pyenv version if .python-version file exists."
  (interactive)
  (f-traverse-upwards
   (lambda (path)
     (message path)
     (let ((pyenv-version-path (f-expand ".python-version" path)))
       (if (f-exists? pyenv-version-path)
          (progn
            (setq pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8)))
            (pyenv-mode-set pyenv-current-version)
            (pyvenv-workon pyenv-current-version)
            (message (concat "Setting virtualenv to " pyenv-current-version))))))))

(add-hook 'after-init-hook 'pyenv-init)
(add-hook 'projectile-after-switch-project-hook 'pyenv-activate-current-project)

;;; base-python.el ends here
#+END_SRC

** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'typescript-mode-hook 'flycheck-mode))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  (use-package company
    :config
    (setq company-show-numbers t)
    (setq company-tooltip-align-annotations t)
    ;; invert the navigation direction if the the completion popup-isearch-match
    ;; is displayed on top (happens near the bottom of windows)
    (setq company-tooltip-flip-when-above t)
    (global-company-mode))

  (use-package company-quickhelp
    :init
    (company-quickhelp-mode 1)
    (use-package pos-tip))


  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.jsx\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-block-padding 2
          web-mode-comment-style 2

          web-mode-enable-css-colorization t
          web-mode-enable-auto-pairing t
          web-mode-enable-comment-keywords t
          web-mode-enable-current-element-highlight t
          )
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode))

  (use-package typescript-mode
    :config
    (setq typescript-indent-level 4)
    (add-hook 'typescript-mode #'subword-mode))

  (use-package tide
    :init
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)))
  ;;         (before-save . tide-format-before-save)))


#+END_SRC
* org-mode
GTD flow.

Configuration and flow mostly lifted from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Orgmode for GTD]] and this [[http://cachestocaches.com/2020/3/my-organized-life/][blog post]].
** Configuration
#+BEGIN_SRC emacs-lisp
  (require 'org)

  (setq org-capture-templates '(("t" "TODO" entry
                                 (file+headline "~/org/gtd/inbox.org" "Tasks")
                                 "* TODO %i%?")
                                ("w" "Work TODO" entry
                                 (file+headline "~/org/gtd/inbox.org" "Tasks")
                                 "* TODO %i%? :@work:")
                                ("c" "Calendar" entry
                                 (file+headline "~/org/gtd/calendar.org" "Calendar")
                                 "* %i%? \n %U")))

  (setq org-log-done 'time)
  (setq org-agenda-custom-commands
        '(("i" "Inbox" tags-todo "inbox"
           ((org-agenda-overriding-header "Inbox tasks")))
          ("n" "Next action" todo "NEXT"
           ((org-agenda-overriding-header "Next Action")))
          ("h" "Habits" todo "HABIT"
           ((org-agenda-overriding-header "Habits")))
          ("g" "Habits" todo "GOAL"
           ((org-agenda-overriding-header "Goals")))
          ("c" "Code" tags-todo "code"
           ((org-agenda-overriding-header "Code tasks")))
          ("r" "R&R" tags-todo "research"
           ((org-agenda-overriding-header "Read & research")))
          ("w" "At work" tags-todo "@work|epiroc|castra"
           ((org-agenda-overriding-header "Work TODO")))
          ("h" "At home" tags-todo "-@work&-fun"
           ((org-agenda-overriding-header "Home TODO")))
          ("u" "Untagged" tags-todo "-{.*}"
           ((org-agenda-overriding-header "Untagged")))
          ("o" "At home" tags-todo "@home"
           ((org-agenda-overriding-header "At Home")))
          ("w" "At work" tags-todo "@work"
           ((org-agenda-overriding-header "At Work")))
          ("e" "At Hecate" tags-todo "@hecate"
           ((org-agenda-overriding-header "At Hecate")))
          ("f" "Fun" tags-todo "fun"
           ((org-agenda-overriding-header "Fun")))))

  (setq org-stuck-projects '("*/+PROJ" ("NEXT") nil ""))
#+END_SRC
** Files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (if (work-computer-p)
                             '("~/org/work" "~")
                           '("~/org/gtd/")))
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
#+END_SRC
** Todo states
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROJ(p)" "FUN(f)" "|" "DONE(d)")
          (sequence "GOAL(g)" "|" "ACHIEVED(a)")
          (sequence "HABIT" "|" "CHECK(k)")
          (sequence "WAITING(w)" "INACTIVE(i)" "SOMEDAY(s)" "|" "CANCELLED(c)")))

  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold)
          ("NEXT" :foreground "yellow" :weight bold)
          ("PROJ" :foreground "magenta" :weight bold)
          ("FUN" :foreground "purple" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("HABIT" :foreground "steel blue" :weight bold)
          ("GOAL" :foreground "gold" :weight bold)
          ("ACHIEVED" :foreground "spring green" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("SOMEDAY" :foreground "cyan" :weight bold)
          ("INACTIVE" :foreground "grey" :weight bold)
          ("SOMEDAY" :foreground "cyan" :weight bold)
          ("CANCELLED" :foreground "forest green" :weight bold)))
#+END_SRC
** Custom functions
#+BEGIN_SRC emacs-lisp
(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (org-current-is-todo)
          (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))

(defun org-current-is-todo ()
  (string= "TODO" (org-get-todo-state)))
#+END_SRC
** Modeline todo entry
An unintrusive way to add items to the inbox.
#+BEGIN_SRC emacs-lisp
  (defun chr-add-todo ()
    (interactive)
    (chr-append-to-file (concat "** TODO " (read-from-minibuffer "TODO: ") "\n") "~/org/gtd/inbox.org"))

  (defun chr-append-to-file (string file)
    (let ((keep (find-buffer-visiting file)))
      (find-file file)
      (end-of-buffer)
      (insert string)
      (save-buffer)
      (unless keep (kill-buffer))))

  (global-set-key (kbd "H-t") 'chr-add-todo)
#+END_SRC
** Keep previous easy templates
Why learn new things when you can keep the old working? 😃
#+begin_src emacs-lisp
  (if (> emacs-major-version 26)
      (require 'org-tempo))
#+end_src
** Save after refile
#+begin_src emacs-lisp
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src
** Additional exports
MediaWiki export for authoring content for MediaWiki wikis.
#+begin_src emacs-lisp
  (use-package ox-mediawiki)
#+end_src
** Periodically save
I frequently forget to save my org files which is frustrating since
they then will not sync to my different machines.

Solve this by periodically saving all org files.
#+BEGIN_SRC emacs-lisp
  (run-with-timer 0 (* 30 60) 'org-save-all-org-buffers)
#+END_SRC
** Archive
Archive trees with ~C-c C-x C-a~ (default org-mode keybinding)
#+BEGIN_SRC emacs-lisp
  (setq org-archive-location "archive/%s_archive::")
  (defvar org-archive-file-header-format "#+FILETAGS: ARCHIVE\nArchived entries from file %s\n")
#+END_SRC
* Other major modes
** AUCTeX

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t)
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
      :mode ("\\.md\\'" "\\.markdown\\'"))
#+END_SRC
** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
      :mode "\\.yaml\\'")
#+END_SRC
* LSP
** Common
[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] is a client for the language server protocol. It provides
many IDE-like features.

Configuration from: [[https://www.sandeepnambiar.com/setting-up-emacs-for-c++/][Emacs setup for C++]]
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    :init
    (setq lsp-keymap-prefix "C-c n")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (typescript-mode . lsp-deferred)
           (python-mode . lsp-deferred)
           (shell-mode . lsp-deferred)
           (rust-mode . lsp-deferred)
           (c-mode . lsp-deferred)
           (c++-mode . lsp-deferred)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))

  (use-package lsp-ui
      :commands lsp-ui-mode)

  (use-package lsp-ivy
      :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
      :commands lsp-treemacs-errors-list)

  ;; For debugger integration
  (use-package dap-mode)

  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
  (use-package dap-lldb) ;; LLDB support for C & C++

  (setq lsp-file-watch-threshold (* 1000 1000))
#+END_SRC
* External
Additional custom elisp code to load that should not be published.
** Secrets
Stuff I do not want to be public (API-keys, etc) is placed in a
seperate secret.el.
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.emacs.d/secrets.org")
      (org-babel-load-file "~/.emacs.d/secrets.org"))
#+END_SRC
